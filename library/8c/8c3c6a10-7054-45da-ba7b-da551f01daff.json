{
  "__type__": "cc.EffectAsset",
  "_name": "builtin-particle-gpu",
  "_objFlags": 0,
  "_native": "",
  "techniques": [
    {
      "passes": [
        {
          "rasterizerState": {
            "cullMode": 0
          },
          "blendState": {
            "targets": [
              {
                "blend": true,
                "blendSrc": 2,
                "blendDst": 1,
                "blendSrcAlpha": 2,
                "blendDstAlpha": 1
              }
            ]
          },
          "program": "builtin-particle-gpu|particle-vs-gpu:gpvs_main|particle-add-gpu-fs:frag",
          "depthStencilState": {
            "depthTest": true,
            "depthWrite": false
          },
          "properties": {
            "mainTexture": {
              "value": "grey",
              "type": 28
            },
            "mainTiling_Offset": {
              "value": [
                1,
                1,
                0,
                0
              ],
              "type": 16
            },
            "frameTile_velLenScale": {
              "value": [
                1,
                1,
                0,
                0
              ],
              "type": 16
            },
            "tintColor": {
              "value": [
                0.5,
                0.5,
                0.5,
                0.5
              ],
              "inspector": {
                "type": "color"
              },
              "type": 16
            }
          }
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 1541402964,
      "glsl3": {
        "vert": "\nprecision mediump float;\n\nuniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nout vec2 uv;\nout vec4 color;\n\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec3 scale\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n  , mat4 view\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float size\n  , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = normalize(vec3(view[0][1], view[1][1], view[2][1]));\n  pos.xyz += ((camRight * vertOffset.x) + (camUp * vertOffset.y)) * scale;\n#elif CC_USE_STRETCHED_BILLBOARD\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz));\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * size;\n  pos.xyz += ((camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex) * scale;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n  vec3 camRight = vec3(1, 0, 0);\n  vec3 camUp = vec3(0, 0, -1);\n  pos.xyz += ((camRight * vertOffset.x) + (camUp * vertOffset.y)) * scale;\n#elif CC_USE_VERTICAL_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = vec3(0, 1, 0);\n  pos.xyz += ((camRight * vertOffset.x) + (camUp * vertOffset.y)) * scale;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\n\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile) {\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n\n  vertIndex.x = 1. - vertIndex.x;\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n\nvoid rotateCorner(inout vec2 corner, float angle) {\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n\n#define DECL_CURVE_STRUCT(name)   uniform CurveStruct_##name## {     int u_##name##_curveMode;     float u_##name##_minConstant;     float u_##name##_maxConstant;     float u_##name##_minKeyTime[8];     vec4 u_##name##_minKeyCoef[8];     vec4 u_##name##_maxKeyCoef[8];     float u_##name##_maxKeyTime[8];   };\n\n#define DECL_CURVE_STRUCT_INT(name)   uniform CurveStructInt_##name## {     int u_##name##_curveMode;     float u_##name##_minConstant;     float u_##name##_maxConstant;     float u_##name##_minKeyTime[8];     vec4 u_##name##_minKeyCoef[8];     vec4 u_##name##_maxKeyCoef[8];     float u_##name##_maxKeyTime[8];     float u_##name##_minIntegral[8 - 1];     float u_##name##_maxIntegral[8 - 1];   };\n\n#define DECL_GRADIENT_STRUCT(name)   uniform GradientStruct_##name## {     int u_##name##_rangeMode;     int u_##name##_minGradMode;     int u_##name##_maxGradMode;     vec4 u_##name##_minColor;     vec4 u_##name##_maxColor;     vec3 u_##name##_minColorKeyValue[8];     float u_##name##_minColorKeyTime[8];     float u_##name##_minAlphaKeyValue[8];     float u_##name##_minAlphaKeyTime[8];     vec3 u_##name##_maxColorKeyValue[8];     float u_##name##_maxColorKeyTime[8];     float u_##name##_maxAlphaKeyValue[8];     float u_##name##_maxAlphaKeyTime[8];   };\n\n#define EVAL_CURVE_RANGE(name, t, rnd)   evaluateCurveRange(u_##name##_curveMode, u_##name##_minConstant, u_##name##_maxConstant, u_##name##_minKeyTime, u_##name##_minKeyCoef, u_##name##_maxKeyTime, u_##name##_maxKeyCoef, t, rnd)\n\n#define EVAL_CURVE_INTEGRAL(name, t, ts, rnd)   evaluateCurveRangeIntegral(u_##name##_curveMode, u_##name##_minConstant, u_##name##_maxConstant, u_##name##_minKeyTime, u_##name##_minKeyCoef, u_##name##_minIntegral, u_##name##_maxKeyTime, u_##name##_maxKeyCoef, u_##name##_maxIntegral, t, ts, rnd)\n\n#define EVAL_CURVE_INTEGRAL_TWICE(name, t, ts, rnd)   evaluateCurveRangeIntegralTwice(u_##name##_curveMode, u_##name##_minConstant, u_##name##_maxConstant, u_##name##_minKeyTime, u_##name##_minKeyCoef, u_##name##_minIntegral, u_##name##_maxKeyTime, u_##name##_maxKeyCoef, u_##name##_maxIntegral, t, ts, rnd)\n\n#define EVAL_GRADIENT_RANGE(name, t, rnd)   evaluateGradientRange(u_##name##_rangeMode, u_##name##_minColor, u_##name##_maxColor,   u_##name##_minGradMode, u_##name##_minColorKeyValue, u_##name##_minColorKeyTime, u_##name##_minAlphaKeyValue, u_##name##_minAlphaKeyTime,   u_##name##_maxGradMode, u_##name##_maxColorKeyValue, u_##name##_maxColorKeyTime, u_##name##_maxAlphaKeyValue, u_##name##_maxAlphaKeyTime, t, rnd);\n\nin vec4 a_position_starttime;\n\nin vec4 a_vertIdx_size_angle;\n\nin vec4 a_color;\nin vec4 a_dir_life;\n\nin float a_rndSeed;\n\nuniform Constants2 {\n  vec4 u_worldRot;\n  float u_psTime;\n  int u_velocity_space;\n  float u_speedModifier;\n  int u_force_space;\n};\n\n#if VELOCITY_OVERTIME_MODULE_ENABLE\n\n  #if USE_STRETCHED_BILLBOARD\n\n  #endif\n#endif\n\n#if FORCE_OVERTIME_MODULE_ENABLE\n\n  #if USE_STRETCHED_BILLBOARD\n\n  #endif\n#endif\n\n#if SIZE_OVERTIME_MODULE_ENABLE\n\n#endif\n\n#if COLOR_OVERTIME_MODULE_ENABLE\n\n#endif\n\n#if TEXTURE_ANIMATION_ENABLE\n\nuniform Animation {\n  float u_cycles;\n  int u_animation_mode;\n  bool u_random_row;\n  int u_row_index;\n};\n#endif\n\n#if ROTATE_OVERTIME_MODULE_ENABLE\n\n#endif\n\nfloat repeat(float t, float length) {\n  return t - floor(t / length) * length;\n}\n\nvec4 rotateQuat(vec4 p, vec4 q) {\n  vec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\n  vec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\n  return vec4(res.xyz, p.w);\n}\n\nfloat random(float seed) {\n  seed = mod(seed, 233280.);\n  float q = (seed * 9301. + 49297.) / 233280.;\n  return fract(q);\n}\n\nfloat calcCurveValue(vec4 coef, float t) {\n  return t * (t * (t * coef.x + coef.y) + coef.z) + coef.w;\n}\n\nfloat evaluateCurve(float keyTime[8], vec4 keyCoef[8], float normalizedTime) {\n  for (int i = 0; i < 8; i++) {\n    if (keyTime[i] > normalizedTime) {\n      return calcCurveValue(keyCoef[i], normalizedTime - (i == 0 ? 0. : keyTime[i - 1]));\n    }\n  }\n}\n\nfloat evaluateIntegral(float keyTime[8], vec4 keyCoef[8], float integral[8 - 1], float normalizedTime, float ts) {\n  for (int i = 0; i < 8; i++) {\n    if (keyTime[i] > normalizedTime) {\n      float t = normalizedTime - (i == 0 ? 0. : keyTime[i - 1]);\n      return ts * ((i - 1 < 0 ? 0. : integral[i - 1]) + t * calcCurveValue(keyCoef[i], t));\n    }\n  }\n}\n\nfloat evaluateIntegralTwice(float keyTime[8], vec4 keyCoef[8], float integral[8 - 1], float normalizedTime, float ts) {\n  for (int i = 0; i < 8; i++) {\n    if (keyTime[i] > normalizedTime) {\n      float t = normalizedTime - (i == 0 ? 0. : keyTime[i - 1]);\n      return ts * ts * ((i - 1 < 0 ? 0. : integral[i - 1]) + t * t * calcCurveValue(keyCoef[i], t));\n    }\n  }\n}\n\nfloat evaluateCurveRange(int mode, float minConstant, float maxConstant\n  , float minKeyTime[8], vec4 minKeyCoef[8]\n  , float maxKeyTime[8], vec4 maxKeyCoef[8]\n  , float t, float rnd) {\n  if (mode == 0) {\n    return minConstant;\n  } else if (mode == 1) {\n    return mix(minConstant, maxConstant, random(rnd));\n  } else if (mode == 2) {\n    return evaluateCurve(minKeyTime, minKeyCoef, t);\n  } else if (mode == 3) {\n    return mix(evaluateCurve(minKeyTime, minKeyCoef, t), evaluateCurve(maxKeyTime, maxKeyCoef, t), random(rnd));\n  }\n}\n\nfloat evaluateCurveRangeIntegral(int mode, float minConstant, float maxConstant\n  , float minKeyTime[8], vec4 minKeyCoef[8], float minIntegral[8 - 1]\n  , float maxKeyTime[8], vec4 maxKeyCoef[8], float maxIntegral[8 - 1]\n  , float t, float ts, float rnd) {\n  if (mode == 0) {\n    return minConstant * t * ts;\n  } else if (mode == 1) {\n    return mix(minConstant, maxConstant, random(rnd)) * t * ts;\n  } else if (mode == 2) {\n    return evaluateIntegral(minKeyTime, minKeyCoef, minIntegral, t, ts);\n  } else if (mode == 3) {\n    return mix(evaluateIntegral(minKeyTime, minKeyCoef, minIntegral, t, ts), evaluateIntegral(maxKeyTime, maxKeyCoef, maxIntegral, t, ts), random(rnd));\n  }\n}\n\nfloat evaluateCurveRangeIntegralTwice(int mode, float minConstant, float maxConstant\n  , float minKeyTime[8], vec4 minKeyCoef[8], float minIntegral[8 - 1]\n  , float maxKeyTime[8], vec4 maxKeyCoef[8], float maxIntegral[8 - 1]\n  , float t, float ts, float rnd) {\n  if (mode == 0) {\n    return minConstant * t * t * ts * ts / 2.;\n  } else if (mode == 1) {\n    return mix(minConstant, maxConstant, random(rnd)) * t * t * ts * ts / 2.;\n  } else if (mode == 2) {\n    return evaluateIntegralTwice(minKeyTime, minKeyCoef, minIntegral, t, ts);\n  } else if (mode == 3) {\n    return mix(evaluateIntegralTwice(minKeyTime, minKeyCoef, minIntegral, t, ts), evaluateIntegralTwice(maxKeyTime, maxKeyCoef, maxIntegral, t, ts), random(rnd));\n  }\n}\n\nvec4 evaluateGradient(int mode, float colorKeyTime[8], vec3 colorKeyValue[8]\n  , float alphaKeyTime[8], float alphaKeyValue[8]\n  , float t){\n  vec4 ret;\n  for (int i = 0; i < 8; i++) {\n    if (t < colorKeyTime[i]) {\n      if (mode == 0) {\n        ret.xyz = colorKeyValue[i];\n      } else if (mode == 1) {\n        ret.xyz = mix(colorKeyValue[i - 1], colorKeyValue[i], (t - colorKeyTime[i - 1]) / (colorKeyTime[i] - colorKeyTime[i - 1]));\n      }\n      break;\n    }\n  }\n  for (int i = 0; i < 8; i++) {\n    if (t < alphaKeyTime[i]) {\n      if (mode == 0) {\n        ret.w = alphaKeyValue[i];\n      } else if (mode == 1) {\n        ret.w = mix(alphaKeyValue[i - 1], alphaKeyValue[i], (t - alphaKeyTime[i - 1]) / (alphaKeyTime[i] - alphaKeyTime[i - 1]));\n      }\n      break;\n    }\n  }\n  return ret;\n}\n\nvec4 evaluateGradientRange(int rangeMode, vec4 minColor, vec4 maxColor,\n  int minGradMode, vec3 minColorKeyValue[8], float minColorKeyTime[8], float minAlphaKeyValue[8], float minAlphaKeyTime[8],\n  int maxGradMode, vec3 maxColorKeyValue[8], float maxColorKeyTime[8], float maxAlphaKeyValue[8], float maxAlphaKeyTime[8],\n  float t, float rnd){\n  if (rangeMode == 0) {\n    return minColor;\n  } else if (rangeMode == 1) {\n    return mix(minColor, maxColor, rnd);\n  } else if (rangeMode == 3) {\n    return evaluateGradient(minGradMode, minColorKeyTime, minColorKeyValue, minAlphaKeyTime, minAlphaKeyValue, t);\n  } else if (rangeMode == 4) {\n    return mix(evaluateGradient(minGradMode, minColorKeyTime, minColorKeyValue, minAlphaKeyTime, minAlphaKeyValue, t),\n      evaluateGradient(maxGradMode, maxColorKeyTime, maxColorKeyValue, maxAlphaKeyTime, maxAlphaKeyValue, t), rnd);\n  }\n}\n\nvec4 gpvs_main() {\n  vec4 pos = vec4(a_position_starttime.xyz, 1.);\n  float activeTime = u_psTime - a_position_starttime.w;\n  float normalizedTime = activeTime / a_dir_life.w;\n\n  #if VELOCITY_OVERTIME_MODULE_ENABLE\n    float speedModifier = u_speedModifier;\n  #else\n    float speedModifier = 1.;\n  #endif\n  pos.xyz += a_dir_life.xyz * activeTime * speedModifier;\n\n  #if USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_dir_life.xyz, 0.);\n    velocity *= speedModifier;\n  #endif\n  #if !USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if USE_STRETCHED_BILLBOARD\n      velocity = rotateQuat(velocity, u_worldRot);\n    #endif\n  #endif\n  #if VELOCITY_OVERTIME_MODULE_ENABLE\n    vec4 velocityTrack = vec4(evaluateCurveRangeIntegral(u_velocity_pos_x_curveMode, u_velocity_pos_x_minConstant, u_velocity_pos_x_maxConstant, u_velocity_pos_x_minKeyTime, u_velocity_pos_x_minKeyCoef, u_velocity_pos_x_minIntegral, u_velocity_pos_x_maxKeyTime, u_velocity_pos_x_maxKeyCoef, u_velocity_pos_x_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+197866.), evaluateCurveRangeIntegral(u_velocity_pos_y_curveMode, u_velocity_pos_y_minConstant, u_velocity_pos_y_maxConstant, u_velocity_pos_y_minKeyTime, u_velocity_pos_y_minKeyCoef, u_velocity_pos_y_minIntegral, u_velocity_pos_y_maxKeyTime, u_velocity_pos_y_maxKeyCoef, u_velocity_pos_y_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+197866.), evaluateCurveRangeIntegral(u_velocity_pos_z_curveMode, u_velocity_pos_z_minConstant, u_velocity_pos_z_maxConstant, u_velocity_pos_z_minKeyTime, u_velocity_pos_z_minKeyCoef, u_velocity_pos_z_minIntegral, u_velocity_pos_z_maxKeyTime, u_velocity_pos_z_maxKeyCoef, u_velocity_pos_z_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+197866.), 0);\n    velocityTrack = velocityTrack * speedModifier;\n    if (u_velocity_space == 0) {\n      velocityTrack = rotateQuat(velocityTrack, u_worldRot);\n    }\n    pos += velocityTrack;\n    #if USE_STRETCHED_BILLBOARD\n      vec4 velocityVel = vec4(evaluateCurveRange(u_velocity_x_curveMode, u_velocity_x_minConstant, u_velocity_x_maxConstant, u_velocity_x_minKeyTime, u_velocity_x_minKeyCoef, u_velocity_x_maxKeyTime, u_velocity_x_maxKeyCoef, normalizedTime, a_dir_life.w), evaluateCurveRange(u_velocity_y_curveMode, u_velocity_y_minConstant, u_velocity_y_maxConstant, u_velocity_y_minKeyTime, u_velocity_y_minKeyCoef, u_velocity_y_maxKeyTime, u_velocity_y_maxKeyCoef, normalizedTime, a_dir_life.w), evaluateCurveRange(u_velocity_z_curveMode, u_velocity_z_minConstant, u_velocity_z_maxConstant, u_velocity_z_minKeyTime, u_velocity_z_minKeyCoef, u_velocity_z_maxKeyTime, u_velocity_z_maxKeyCoef, normalizedTime, a_dir_life.w), 0);\n      if (u_velocity_space == 0) {\n        velocityVel = rotateQuat(velocityVel, u_worldRot);\n      }\n      velocityVel *= speedModifier;\n      velocity += velocityVel;\n    #endif\n  #endif\n\n  #if FORCE_OVERTIME_MODULE_ENABLE\n    vec4 forceTrack = vec4(evaluateCurveRangeIntegralTwice(u_force_pos_x_curveMode, u_force_pos_x_minConstant, u_force_pos_x_maxConstant, u_force_pos_x_minKeyTime, u_force_pos_x_minKeyCoef, u_force_pos_x_minIntegral, u_force_pos_x_maxKeyTime, u_force_pos_x_maxKeyCoef, u_force_pos_x_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+212165.), evaluateCurveRangeIntegralTwice(u_force_pos_y_curveMode, u_force_pos_y_minConstant, u_force_pos_y_maxConstant, u_force_pos_y_minKeyTime, u_force_pos_y_minKeyCoef, u_force_pos_y_minIntegral, u_force_pos_y_maxKeyTime, u_force_pos_y_maxKeyCoef, u_force_pos_y_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+212165.), evaluateCurveRangeIntegralTwice(u_force_pos_z_curveMode, u_force_pos_z_minConstant, u_force_pos_z_maxConstant, u_force_pos_z_minKeyTime, u_force_pos_z_minKeyCoef, u_force_pos_z_minIntegral, u_force_pos_z_maxKeyTime, u_force_pos_z_maxKeyCoef, u_force_pos_z_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+212165.), 0);\n    forceTrack = forceTrack * speedModifier;\n    if (u_force_space == 0) {\n      forceTrack = rotateQuat(forceTrack, u_worldRot);\n    }\n    pos += forceTrack;\n    #if USE_STRETCHED_BILLBOARD\n      vec4 forceVel = vec4(evaluateCurveRangeIntegral(u_force_vel_x_curveMode, u_force_vel_x_minConstant, u_force_vel_x_maxConstant, u_force_vel_x_minKeyTime, u_force_vel_x_minKeyCoef, u_force_vel_x_minIntegral, u_force_vel_x_maxKeyTime, u_force_vel_x_maxKeyCoef, u_force_vel_x_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+212165.), evaluateCurveRangeIntegral(u_force_vel_y_curveMode, u_force_vel_y_minConstant, u_force_vel_y_maxConstant, u_force_vel_y_minKeyTime, u_force_vel_y_minKeyCoef, u_force_vel_y_minIntegral, u_force_vel_y_maxKeyTime, u_force_vel_y_maxKeyCoef, u_force_vel_y_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+212165.), evaluateCurveRangeIntegral(u_force_vel_z_curveMode, u_force_vel_z_minConstant, u_force_vel_z_maxConstant, u_force_vel_z_minKeyTime, u_force_vel_z_minKeyCoef, u_force_vel_z_minIntegral, u_force_vel_z_maxKeyTime, u_force_vel_z_maxKeyCoef, u_force_vel_z_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+212165.), 0);\n      if (u_force_space == 0) {\n        forceVel = rotateQuat(forceVel, u_worldRot);\n      }\n      forceVel *= speedModifier;\n      velocity += forceVel;\n    #endif\n  #endif\n\n  float size = a_vertIdx_size_angle.z;\n  #if SIZE_OVERTIME_MODULE_ENABLE\n    float sizeModifier = evaluateCurveRange(u_size_curveMode, u_size_minConstant, u_size_maxConstant, u_size_minKeyTime, u_size_minKeyCoef, u_size_maxKeyTime, u_size_maxKeyCoef, normalizedTime, a_rndSeed+39825.);\n    size *= sizeModifier;\n  #endif\n\n  vec2 cornerOffset = vec2((a_vertIdx_size_angle.xy - 0.5) * size);\n  #if !USE_STRETCHED_BILLBOARD\n    float angle = a_vertIdx_size_angle.w;\n    #if ROTATE_OVERTIME_MODULE_ENABLE\n      angle += evaluateCurveRangeIntegral(u_rotate_curveMode, u_rotate_minConstant, u_rotate_maxConstant, u_rotate_minKeyTime, u_rotate_minKeyCoef, u_rotate_minIntegral, u_rotate_maxKeyTime, u_rotate_maxKeyCoef, u_rotate_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+125292.);\n    #endif\n    rotateCorner(cornerOffset, angle);\n  #endif\n\n  computeVertPos(pos, cornerOffset\n  #if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n    , cc_matView\n  #endif\n  #if USE_STRETCHED_BILLBOARD\n    , cc_cameraPos\n    , velocity\n    , velocityScale\n    , lengthScale\n    , size\n    , a_vertIdx_size_angle.x\n  #endif\n  );\n\n  pos = cc_matViewProj * pos;\n\n  float frameIndex = 0.;\n  #if TEXTURE_ANIMATION_ENABLE\n    if (u_animation_mode == 0) {\n      frameIndex = repeat(u_cycles * evaluateCurveRange(u_frameOverTime_curveMode, u_frameOverTime_minConstant, u_frameOverTime_maxConstant, u_frameOverTime_minKeyTime, u_frameOverTime_minKeyCoef, u_frameOverTime_maxKeyTime, u_frameOverTime_maxKeyCoef, normalizedTime, a_rndSeed+90794.), 1.);\n    } else if (u_animation_mode == 1) {\n      float rowLength = 1. / frameTile_velLenScale.y;\n      if (u_random_row) {\n        float f = repeat(u_cycles * evaluateCurveRange(u_frameOverTime_curveMode, u_frameOverTime_minConstant, u_frameOverTime_maxConstant, u_frameOverTime_minKeyTime, u_frameOverTime_minKeyCoef, u_frameOverTime_maxKeyTime, u_frameOverTime_maxKeyCoef, normalizedTime, a_rndSeed+90794.), 1.);\n        float startRow = floor(random(floor(u_psTime * 1000.)) * frameTile_velLenScale.y);\n        float from = startRow * rowLength;\n        float to = from + rowLength;\n        frameIndex = mix(from, to, f);\n      }\n      else {\n        float from = float(u_row_index) * rowLength;\n        float to = from + rowLength;\n        frameIndex = mix(from, to, repeat(u_cycles * evaluateCurveRange(u_frameOverTime_curveMode, u_frameOverTime_minConstant, u_frameOverTime_maxConstant, u_frameOverTime_minKeyTime, u_frameOverTime_minKeyCoef, u_frameOverTime_maxKeyTime, u_frameOverTime_maxKeyCoef, normalizedTime, a_rndSeed+90794.), 1.));\n      }\n    }\n  #endif\n  uv = computeUV(frameIndex, a_vertIdx_size_angle.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainOffset.zw;\n\n  #if COLOR_OVERTIME_MODULE_ENABLE\n    color = a_color * evaluateGradientRange(u_color_rangeMode, u_color_minColor, u_color_maxColor,   u_color_minGradMode, u_color_minColorKeyValue, u_color_minColorKeyTime, u_color_minAlphaKeyValue, u_color_minAlphaKeyTime,   u_color_maxGradMode, u_color_maxColorKeyValue, u_color_maxColorKeyTime, u_color_maxAlphaKeyValue, u_color_maxAlphaKeyTime, normalizedTime, a_rndSeed+91041.);;\n  #else\n    color = a_color;\n  #endif\n\n  return pos;\n}\n\nvoid main() { gl_Position = gpvs_main(); }\n",
        "frag": "\nprecision mediump float;\nuniform sampler2D mainTexture;\nuniform FragConstants {\n  vec4 tintColor;\n};\n\nin vec2 uv;\nin vec4 color;\n\nvec4 frag () {\n  return 2.0 * color * tintColor * texture(mainTexture, uv);\n}\n\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }\n"
      },
      "glsl1": {
        "vert": "\nprecision mediump float;\n\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform mat4 cc_matView;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\n\nvarying vec2 uv;\nvarying vec4 color;\n\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec3 scale\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n  , mat4 view\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float size\n  , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = normalize(vec3(view[0][1], view[1][1], view[2][1]));\n  pos.xyz += ((camRight * vertOffset.x) + (camUp * vertOffset.y)) * scale;\n#elif CC_USE_STRETCHED_BILLBOARD\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz));\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * size;\n  pos.xyz += ((camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex) * scale;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n  vec3 camRight = vec3(1, 0, 0);\n  vec3 camUp = vec3(0, 0, -1);\n  pos.xyz += ((camRight * vertOffset.x) + (camUp * vertOffset.y)) * scale;\n#elif CC_USE_VERTICAL_BILLBOARD\n  vec3 camRight = normalize(vec3(view[0][0], view[1][0], view[2][0]));\n  vec3 camUp = vec3(0, 1, 0);\n  pos.xyz += ((camRight * vertOffset.x) + (camUp * vertOffset.y)) * scale;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\n\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile) {\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n\n  vertIndex.x = 1. - vertIndex.x;\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n\nvoid rotateCorner(inout vec2 corner, float angle) {\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n\n#define DECL_CURVE_STRUCT(name)   uniform CurveStruct_##name## {     int u_##name##_curveMode;     float u_##name##_minConstant;     float u_##name##_maxConstant;     float u_##name##_minKeyTime[8];     vec4 u_##name##_minKeyCoef[8];     vec4 u_##name##_maxKeyCoef[8];     float u_##name##_maxKeyTime[8];   };\n\n#define DECL_CURVE_STRUCT_INT(name)   uniform CurveStructInt_##name## {     int u_##name##_curveMode;     float u_##name##_minConstant;     float u_##name##_maxConstant;     float u_##name##_minKeyTime[8];     vec4 u_##name##_minKeyCoef[8];     vec4 u_##name##_maxKeyCoef[8];     float u_##name##_maxKeyTime[8];     float u_##name##_minIntegral[8 - 1];     float u_##name##_maxIntegral[8 - 1];   };\n\n#define DECL_GRADIENT_STRUCT(name)   uniform GradientStruct_##name## {     int u_##name##_rangeMode;     int u_##name##_minGradMode;     int u_##name##_maxGradMode;     vec4 u_##name##_minColor;     vec4 u_##name##_maxColor;     vec3 u_##name##_minColorKeyValue[8];     float u_##name##_minColorKeyTime[8];     float u_##name##_minAlphaKeyValue[8];     float u_##name##_minAlphaKeyTime[8];     vec3 u_##name##_maxColorKeyValue[8];     float u_##name##_maxColorKeyTime[8];     float u_##name##_maxAlphaKeyValue[8];     float u_##name##_maxAlphaKeyTime[8];   };\n\n#define EVAL_CURVE_RANGE(name, t, rnd)   evaluateCurveRange(u_##name##_curveMode, u_##name##_minConstant, u_##name##_maxConstant, u_##name##_minKeyTime, u_##name##_minKeyCoef, u_##name##_maxKeyTime, u_##name##_maxKeyCoef, t, rnd)\n\n#define EVAL_CURVE_INTEGRAL(name, t, ts, rnd)   evaluateCurveRangeIntegral(u_##name##_curveMode, u_##name##_minConstant, u_##name##_maxConstant, u_##name##_minKeyTime, u_##name##_minKeyCoef, u_##name##_minIntegral, u_##name##_maxKeyTime, u_##name##_maxKeyCoef, u_##name##_maxIntegral, t, ts, rnd)\n\n#define EVAL_CURVE_INTEGRAL_TWICE(name, t, ts, rnd)   evaluateCurveRangeIntegralTwice(u_##name##_curveMode, u_##name##_minConstant, u_##name##_maxConstant, u_##name##_minKeyTime, u_##name##_minKeyCoef, u_##name##_minIntegral, u_##name##_maxKeyTime, u_##name##_maxKeyCoef, u_##name##_maxIntegral, t, ts, rnd)\n\n#define EVAL_GRADIENT_RANGE(name, t, rnd)   evaluateGradientRange(u_##name##_rangeMode, u_##name##_minColor, u_##name##_maxColor,   u_##name##_minGradMode, u_##name##_minColorKeyValue, u_##name##_minColorKeyTime, u_##name##_minAlphaKeyValue, u_##name##_minAlphaKeyTime,   u_##name##_maxGradMode, u_##name##_maxColorKeyValue, u_##name##_maxColorKeyTime, u_##name##_maxAlphaKeyValue, u_##name##_maxAlphaKeyTime, t, rnd);\n\nattribute vec4 a_position_starttime;\n\nattribute vec4 a_vertIdx_size_angle;\n\nattribute vec4 a_color;\nattribute vec4 a_dir_life;\n\nattribute float a_rndSeed;\n\nuniform vec4 u_worldRot;\nuniform float u_psTime;\nuniform int u_velocity_space;\nuniform float u_speedModifier;\nuniform int u_force_space;\n\n#if VELOCITY_OVERTIME_MODULE_ENABLE\n\n  #if USE_STRETCHED_BILLBOARD\n\n  #endif\n#endif\n\n#if FORCE_OVERTIME_MODULE_ENABLE\n\n  #if USE_STRETCHED_BILLBOARD\n\n  #endif\n#endif\n\n#if SIZE_OVERTIME_MODULE_ENABLE\n\n#endif\n\n#if COLOR_OVERTIME_MODULE_ENABLE\n\n#endif\n\n#if TEXTURE_ANIMATION_ENABLE\n\nuniform float u_cycles;\nuniform int u_animation_mode;\nuniform bool u_random_row;\nuniform int u_row_index;\n\n#endif\n\n#if ROTATE_OVERTIME_MODULE_ENABLE\n\n#endif\n\nfloat repeat(float t, float length) {\n  return t - floor(t / length) * length;\n}\n\nvec4 rotateQuat(vec4 p, vec4 q) {\n  vec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\n  vec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\n  return vec4(res.xyz, p.w);\n}\n\nfloat random(float seed) {\n  seed = mod(seed, 233280.);\n  float q = (seed * 9301. + 49297.) / 233280.;\n  return fract(q);\n}\n\nfloat calcCurveValue(vec4 coef, float t) {\n  return t * (t * (t * coef.x + coef.y) + coef.z) + coef.w;\n}\n\nfloat evaluateCurve(float keyTime[8], vec4 keyCoef[8], float normalizedTime) {\n  for (int i = 0; i < 8; i++) {\n    if (keyTime[i] > normalizedTime) {\n      return calcCurveValue(keyCoef[i], normalizedTime - (i == 0 ? 0. : keyTime[i - 1]));\n    }\n  }\n}\n\nfloat evaluateIntegral(float keyTime[8], vec4 keyCoef[8], float integral[8 - 1], float normalizedTime, float ts) {\n  for (int i = 0; i < 8; i++) {\n    if (keyTime[i] > normalizedTime) {\n      float t = normalizedTime - (i == 0 ? 0. : keyTime[i - 1]);\n      return ts * ((i - 1 < 0 ? 0. : integral[i - 1]) + t * calcCurveValue(keyCoef[i], t));\n    }\n  }\n}\n\nfloat evaluateIntegralTwice(float keyTime[8], vec4 keyCoef[8], float integral[8 - 1], float normalizedTime, float ts) {\n  for (int i = 0; i < 8; i++) {\n    if (keyTime[i] > normalizedTime) {\n      float t = normalizedTime - (i == 0 ? 0. : keyTime[i - 1]);\n      return ts * ts * ((i - 1 < 0 ? 0. : integral[i - 1]) + t * t * calcCurveValue(keyCoef[i], t));\n    }\n  }\n}\n\nfloat evaluateCurveRange(int mode, float minConstant, float maxConstant\n  , float minKeyTime[8], vec4 minKeyCoef[8]\n  , float maxKeyTime[8], vec4 maxKeyCoef[8]\n  , float t, float rnd) {\n  if (mode == 0) {\n    return minConstant;\n  } else if (mode == 1) {\n    return mix(minConstant, maxConstant, random(rnd));\n  } else if (mode == 2) {\n    return evaluateCurve(minKeyTime, minKeyCoef, t);\n  } else if (mode == 3) {\n    return mix(evaluateCurve(minKeyTime, minKeyCoef, t), evaluateCurve(maxKeyTime, maxKeyCoef, t), random(rnd));\n  }\n}\n\nfloat evaluateCurveRangeIntegral(int mode, float minConstant, float maxConstant\n  , float minKeyTime[8], vec4 minKeyCoef[8], float minIntegral[8 - 1]\n  , float maxKeyTime[8], vec4 maxKeyCoef[8], float maxIntegral[8 - 1]\n  , float t, float ts, float rnd) {\n  if (mode == 0) {\n    return minConstant * t * ts;\n  } else if (mode == 1) {\n    return mix(minConstant, maxConstant, random(rnd)) * t * ts;\n  } else if (mode == 2) {\n    return evaluateIntegral(minKeyTime, minKeyCoef, minIntegral, t, ts);\n  } else if (mode == 3) {\n    return mix(evaluateIntegral(minKeyTime, minKeyCoef, minIntegral, t, ts), evaluateIntegral(maxKeyTime, maxKeyCoef, maxIntegral, t, ts), random(rnd));\n  }\n}\n\nfloat evaluateCurveRangeIntegralTwice(int mode, float minConstant, float maxConstant\n  , float minKeyTime[8], vec4 minKeyCoef[8], float minIntegral[8 - 1]\n  , float maxKeyTime[8], vec4 maxKeyCoef[8], float maxIntegral[8 - 1]\n  , float t, float ts, float rnd) {\n  if (mode == 0) {\n    return minConstant * t * t * ts * ts / 2.;\n  } else if (mode == 1) {\n    return mix(minConstant, maxConstant, random(rnd)) * t * t * ts * ts / 2.;\n  } else if (mode == 2) {\n    return evaluateIntegralTwice(minKeyTime, minKeyCoef, minIntegral, t, ts);\n  } else if (mode == 3) {\n    return mix(evaluateIntegralTwice(minKeyTime, minKeyCoef, minIntegral, t, ts), evaluateIntegralTwice(maxKeyTime, maxKeyCoef, maxIntegral, t, ts), random(rnd));\n  }\n}\n\nvec4 evaluateGradient(int mode, float colorKeyTime[8], vec3 colorKeyValue[8]\n  , float alphaKeyTime[8], float alphaKeyValue[8]\n  , float t){\n  vec4 ret;\n  for (int i = 0; i < 8; i++) {\n    if (t < colorKeyTime[i]) {\n      if (mode == 0) {\n        ret.xyz = colorKeyValue[i];\n      } else if (mode == 1) {\n        ret.xyz = mix(colorKeyValue[i - 1], colorKeyValue[i], (t - colorKeyTime[i - 1]) / (colorKeyTime[i] - colorKeyTime[i - 1]));\n      }\n      break;\n    }\n  }\n  for (int i = 0; i < 8; i++) {\n    if (t < alphaKeyTime[i]) {\n      if (mode == 0) {\n        ret.w = alphaKeyValue[i];\n      } else if (mode == 1) {\n        ret.w = mix(alphaKeyValue[i - 1], alphaKeyValue[i], (t - alphaKeyTime[i - 1]) / (alphaKeyTime[i] - alphaKeyTime[i - 1]));\n      }\n      break;\n    }\n  }\n  return ret;\n}\n\nvec4 evaluateGradientRange(int rangeMode, vec4 minColor, vec4 maxColor,\n  int minGradMode, vec3 minColorKeyValue[8], float minColorKeyTime[8], float minAlphaKeyValue[8], float minAlphaKeyTime[8],\n  int maxGradMode, vec3 maxColorKeyValue[8], float maxColorKeyTime[8], float maxAlphaKeyValue[8], float maxAlphaKeyTime[8],\n  float t, float rnd){\n  if (rangeMode == 0) {\n    return minColor;\n  } else if (rangeMode == 1) {\n    return mix(minColor, maxColor, rnd);\n  } else if (rangeMode == 3) {\n    return evaluateGradient(minGradMode, minColorKeyTime, minColorKeyValue, minAlphaKeyTime, minAlphaKeyValue, t);\n  } else if (rangeMode == 4) {\n    return mix(evaluateGradient(minGradMode, minColorKeyTime, minColorKeyValue, minAlphaKeyTime, minAlphaKeyValue, t),\n      evaluateGradient(maxGradMode, maxColorKeyTime, maxColorKeyValue, maxAlphaKeyTime, maxAlphaKeyValue, t), rnd);\n  }\n}\n\nvec4 gpvs_main() {\n  vec4 pos = vec4(a_position_starttime.xyz, 1.);\n  float activeTime = u_psTime - a_position_starttime.w;\n  float normalizedTime = activeTime / a_dir_life.w;\n\n  #if VELOCITY_OVERTIME_MODULE_ENABLE\n    float speedModifier = u_speedModifier;\n  #else\n    float speedModifier = 1.;\n  #endif\n  pos.xyz += a_dir_life.xyz * activeTime * speedModifier;\n\n  #if USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_dir_life.xyz, 0.);\n    velocity *= speedModifier;\n  #endif\n  #if !USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if USE_STRETCHED_BILLBOARD\n      velocity = rotateQuat(velocity, u_worldRot);\n    #endif\n  #endif\n  #if VELOCITY_OVERTIME_MODULE_ENABLE\n    vec4 velocityTrack = vec4(evaluateCurveRangeIntegral(u_velocity_pos_x_curveMode, u_velocity_pos_x_minConstant, u_velocity_pos_x_maxConstant, u_velocity_pos_x_minKeyTime, u_velocity_pos_x_minKeyCoef, u_velocity_pos_x_minIntegral, u_velocity_pos_x_maxKeyTime, u_velocity_pos_x_maxKeyCoef, u_velocity_pos_x_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+197866.), evaluateCurveRangeIntegral(u_velocity_pos_y_curveMode, u_velocity_pos_y_minConstant, u_velocity_pos_y_maxConstant, u_velocity_pos_y_minKeyTime, u_velocity_pos_y_minKeyCoef, u_velocity_pos_y_minIntegral, u_velocity_pos_y_maxKeyTime, u_velocity_pos_y_maxKeyCoef, u_velocity_pos_y_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+197866.), evaluateCurveRangeIntegral(u_velocity_pos_z_curveMode, u_velocity_pos_z_minConstant, u_velocity_pos_z_maxConstant, u_velocity_pos_z_minKeyTime, u_velocity_pos_z_minKeyCoef, u_velocity_pos_z_minIntegral, u_velocity_pos_z_maxKeyTime, u_velocity_pos_z_maxKeyCoef, u_velocity_pos_z_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+197866.), 0);\n    velocityTrack = velocityTrack * speedModifier;\n    if (u_velocity_space == 0) {\n      velocityTrack = rotateQuat(velocityTrack, u_worldRot);\n    }\n    pos += velocityTrack;\n    #if USE_STRETCHED_BILLBOARD\n      vec4 velocityVel = vec4(evaluateCurveRange(u_velocity_x_curveMode, u_velocity_x_minConstant, u_velocity_x_maxConstant, u_velocity_x_minKeyTime, u_velocity_x_minKeyCoef, u_velocity_x_maxKeyTime, u_velocity_x_maxKeyCoef, normalizedTime, a_dir_life.w), evaluateCurveRange(u_velocity_y_curveMode, u_velocity_y_minConstant, u_velocity_y_maxConstant, u_velocity_y_minKeyTime, u_velocity_y_minKeyCoef, u_velocity_y_maxKeyTime, u_velocity_y_maxKeyCoef, normalizedTime, a_dir_life.w), evaluateCurveRange(u_velocity_z_curveMode, u_velocity_z_minConstant, u_velocity_z_maxConstant, u_velocity_z_minKeyTime, u_velocity_z_minKeyCoef, u_velocity_z_maxKeyTime, u_velocity_z_maxKeyCoef, normalizedTime, a_dir_life.w), 0);\n      if (u_velocity_space == 0) {\n        velocityVel = rotateQuat(velocityVel, u_worldRot);\n      }\n      velocityVel *= speedModifier;\n      velocity += velocityVel;\n    #endif\n  #endif\n\n  #if FORCE_OVERTIME_MODULE_ENABLE\n    vec4 forceTrack = vec4(evaluateCurveRangeIntegralTwice(u_force_pos_x_curveMode, u_force_pos_x_minConstant, u_force_pos_x_maxConstant, u_force_pos_x_minKeyTime, u_force_pos_x_minKeyCoef, u_force_pos_x_minIntegral, u_force_pos_x_maxKeyTime, u_force_pos_x_maxKeyCoef, u_force_pos_x_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+212165.), evaluateCurveRangeIntegralTwice(u_force_pos_y_curveMode, u_force_pos_y_minConstant, u_force_pos_y_maxConstant, u_force_pos_y_minKeyTime, u_force_pos_y_minKeyCoef, u_force_pos_y_minIntegral, u_force_pos_y_maxKeyTime, u_force_pos_y_maxKeyCoef, u_force_pos_y_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+212165.), evaluateCurveRangeIntegralTwice(u_force_pos_z_curveMode, u_force_pos_z_minConstant, u_force_pos_z_maxConstant, u_force_pos_z_minKeyTime, u_force_pos_z_minKeyCoef, u_force_pos_z_minIntegral, u_force_pos_z_maxKeyTime, u_force_pos_z_maxKeyCoef, u_force_pos_z_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+212165.), 0);\n    forceTrack = forceTrack * speedModifier;\n    if (u_force_space == 0) {\n      forceTrack = rotateQuat(forceTrack, u_worldRot);\n    }\n    pos += forceTrack;\n    #if USE_STRETCHED_BILLBOARD\n      vec4 forceVel = vec4(evaluateCurveRangeIntegral(u_force_vel_x_curveMode, u_force_vel_x_minConstant, u_force_vel_x_maxConstant, u_force_vel_x_minKeyTime, u_force_vel_x_minKeyCoef, u_force_vel_x_minIntegral, u_force_vel_x_maxKeyTime, u_force_vel_x_maxKeyCoef, u_force_vel_x_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+212165.), evaluateCurveRangeIntegral(u_force_vel_y_curveMode, u_force_vel_y_minConstant, u_force_vel_y_maxConstant, u_force_vel_y_minKeyTime, u_force_vel_y_minKeyCoef, u_force_vel_y_minIntegral, u_force_vel_y_maxKeyTime, u_force_vel_y_maxKeyCoef, u_force_vel_y_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+212165.), evaluateCurveRangeIntegral(u_force_vel_z_curveMode, u_force_vel_z_minConstant, u_force_vel_z_maxConstant, u_force_vel_z_minKeyTime, u_force_vel_z_minKeyCoef, u_force_vel_z_minIntegral, u_force_vel_z_maxKeyTime, u_force_vel_z_maxKeyCoef, u_force_vel_z_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+212165.), 0);\n      if (u_force_space == 0) {\n        forceVel = rotateQuat(forceVel, u_worldRot);\n      }\n      forceVel *= speedModifier;\n      velocity += forceVel;\n    #endif\n  #endif\n\n  float size = a_vertIdx_size_angle.z;\n  #if SIZE_OVERTIME_MODULE_ENABLE\n    float sizeModifier = evaluateCurveRange(u_size_curveMode, u_size_minConstant, u_size_maxConstant, u_size_minKeyTime, u_size_minKeyCoef, u_size_maxKeyTime, u_size_maxKeyCoef, normalizedTime, a_rndSeed+39825.);\n    size *= sizeModifier;\n  #endif\n\n  vec2 cornerOffset = vec2((a_vertIdx_size_angle.xy - 0.5) * size);\n  #if !USE_STRETCHED_BILLBOARD\n    float angle = a_vertIdx_size_angle.w;\n    #if ROTATE_OVERTIME_MODULE_ENABLE\n      angle += evaluateCurveRangeIntegral(u_rotate_curveMode, u_rotate_minConstant, u_rotate_maxConstant, u_rotate_minKeyTime, u_rotate_minKeyCoef, u_rotate_minIntegral, u_rotate_maxKeyTime, u_rotate_maxKeyCoef, u_rotate_maxIntegral, normalizedTime, a_dir_life.w, a_rndSeed+125292.);\n    #endif\n    rotateCorner(cornerOffset, angle);\n  #endif\n\n  computeVertPos(pos, cornerOffset\n  #if USE_BILLBOARD || USE_VERTICAL_BILLBOARD\n    , cc_matView\n  #endif\n  #if USE_STRETCHED_BILLBOARD\n    , cc_cameraPos\n    , velocity\n    , velocityScale\n    , lengthScale\n    , size\n    , a_vertIdx_size_angle.x\n  #endif\n  );\n\n  pos = cc_matViewProj * pos;\n\n  float frameIndex = 0.;\n  #if TEXTURE_ANIMATION_ENABLE\n    if (u_animation_mode == 0) {\n      frameIndex = repeat(u_cycles * evaluateCurveRange(u_frameOverTime_curveMode, u_frameOverTime_minConstant, u_frameOverTime_maxConstant, u_frameOverTime_minKeyTime, u_frameOverTime_minKeyCoef, u_frameOverTime_maxKeyTime, u_frameOverTime_maxKeyCoef, normalizedTime, a_rndSeed+90794.), 1.);\n    } else if (u_animation_mode == 1) {\n      float rowLength = 1. / frameTile_velLenScale.y;\n      if (u_random_row) {\n        float f = repeat(u_cycles * evaluateCurveRange(u_frameOverTime_curveMode, u_frameOverTime_minConstant, u_frameOverTime_maxConstant, u_frameOverTime_minKeyTime, u_frameOverTime_minKeyCoef, u_frameOverTime_maxKeyTime, u_frameOverTime_maxKeyCoef, normalizedTime, a_rndSeed+90794.), 1.);\n        float startRow = floor(random(floor(u_psTime * 1000.)) * frameTile_velLenScale.y);\n        float from = startRow * rowLength;\n        float to = from + rowLength;\n        frameIndex = mix(from, to, f);\n      }\n      else {\n        float from = float(u_row_index) * rowLength;\n        float to = from + rowLength;\n        frameIndex = mix(from, to, repeat(u_cycles * evaluateCurveRange(u_frameOverTime_curveMode, u_frameOverTime_minConstant, u_frameOverTime_maxConstant, u_frameOverTime_minKeyTime, u_frameOverTime_minKeyCoef, u_frameOverTime_maxKeyTime, u_frameOverTime_maxKeyCoef, normalizedTime, a_rndSeed+90794.), 1.));\n      }\n    }\n  #endif\n  uv = computeUV(frameIndex, a_vertIdx_size_angle.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainOffset.zw;\n\n  #if COLOR_OVERTIME_MODULE_ENABLE\n    color = a_color * evaluateGradientRange(u_color_rangeMode, u_color_minColor, u_color_maxColor,   u_color_minGradMode, u_color_minColorKeyValue, u_color_minColorKeyTime, u_color_minAlphaKeyValue, u_color_minAlphaKeyTime,   u_color_maxGradMode, u_color_maxColorKeyValue, u_color_maxColorKeyTime, u_color_maxAlphaKeyValue, u_color_maxAlphaKeyTime, normalizedTime, a_rndSeed+91041.);;\n  #else\n    color = a_color;\n  #endif\n\n  return pos;\n}\n\nvoid main() { gl_Position = gpvs_main(); }\n",
        "frag": "\nprecision mediump float;\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\n\nvarying vec2 uv;\nvarying vec4 color;\n\nvec4 frag () {\n  return 2.0 * color * tintColor * texture2D(mainTexture, uv);\n}\n\nvoid main() { gl_FragColor = frag(); }\n"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "CC_USE_BILLBOARD",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_STRETCHED_BILLBOARD",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_HORIZONTAL_BILLBOARD",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_VERTICAL_BILLBOARD",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "VELOCITY_OVERTIME_MODULE_ENABLE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_STRETCHED_BILLBOARD",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "FORCE_OVERTIME_MODULE_ENABLE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "SIZE_OVERTIME_MODULE_ENABLE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "COLOR_OVERTIME_MODULE_ENABLE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "TEXTURE_ANIMATION_ENABLE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "ROTATE_OVERTIME_MODULE_ENABLE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_WORLD_SPACE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_BILLBOARD",
          "type": "boolean",
          "defines": []
        }
      ],
      "blocks": [
        {
          "name": "Constants",
          "members": [
            {
              "name": "mainTiling_Offset",
              "type": 16,
              "count": 1
            },
            {
              "name": "frameTile_velLenScale",
              "type": 16,
              "count": 1
            },
            {
              "name": "scale",
              "type": 16,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 0
        },
        {
          "name": "Constants2",
          "members": [
            {
              "name": "u_worldRot",
              "type": 16,
              "count": 1
            },
            {
              "name": "u_psTime",
              "type": 13,
              "count": 1
            },
            {
              "name": "u_velocity_space",
              "type": 5,
              "count": 1
            },
            {
              "name": "u_speedModifier",
              "type": 13,
              "count": 1
            },
            {
              "name": "u_force_space",
              "type": 5,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 1
        },
        {
          "name": "Animation",
          "members": [
            {
              "name": "u_cycles",
              "type": 13,
              "count": 1
            },
            {
              "name": "u_animation_mode",
              "type": 5,
              "count": 1
            },
            {
              "name": "u_random_row",
              "type": 1,
              "count": 1
            },
            {
              "name": "u_row_index",
              "type": 5,
              "count": 1
            }
          ],
          "defines": [
            "TEXTURE_ANIMATION_ENABLE"
          ],
          "binding": 2
        },
        {
          "name": "FragConstants",
          "members": [
            {
              "name": "tintColor",
              "type": 16,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 3
        }
      ],
      "samplers": [
        {
          "name": "mainTexture",
          "type": 28,
          "count": 1,
          "defines": [],
          "binding": 30
        }
      ],
      "dependencies": {},
      "name": "builtin-particle-gpu|particle-vs-gpu:gpvs_main|particle-add-gpu-fs:frag"
    }
  ]
}